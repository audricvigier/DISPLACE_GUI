diff --git a/simulator/Makefile b/simulator/Makefile
index 9eebdf1..2d6132f 100644
--- a/simulator/Makefile
+++ b/simulator/Makefile
@@ -50,7 +50,7 @@ HEADERS= \
         ../include/options.h
 
 LIBS=-lpthread -lrt
-CPPFLAGS=-O2 -std=c++11 -I../include -I.
+CPPFLAGS=-O2 -I../include -I.
 LDFLAGS=
 
 OBJS=$(SOURCES:.cpp=.o)
diff --git a/simulator/main.cpp b/simulator/main.cpp
index 3934175..840e2b7 100644
--- a/simulator/main.cpp
+++ b/simulator/main.cpp
@@ -236,7 +236,7 @@ void guiSendCurrentStep (unsigned int tstep)
     if (use_gui) {
         ostringstream ss;
         ss << "=S" << tstep << endl;      /* use gui */
-        mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
+        mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
     }
 }
 
@@ -245,7 +245,7 @@ void guiSendUpdateCommand (const std::string &filename, int tstep)
     if (use_gui) {
         ostringstream ss;
         ss << "=U" << filename << " " << tstep << endl;
-        mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
+        mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
     }
 }
 
@@ -254,7 +254,7 @@ void guiSendMemoryInfo(const MemoryInfo &info)
     if (use_gui) {
         ostringstream ss;
         ss << "=Dm" << info.rss() << " " << info.peakRss() << endl;
-        mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
+        mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
     }
 
 }
@@ -264,7 +264,7 @@ void guiSendCapture(bool on)
     if (use_gui) {
         ostringstream ss;
         ss << "=Dc" << (on ? "+" : "-") << endl;
-        mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
+        mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
     }
 }
 
@@ -2586,7 +2586,7 @@ int main(int argc, char* argv[])
 
         ostringstream os;
         os << "tstep " << tstep << endl;
-        mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(os.str())));
+        mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(os.str())));
 
         dout(cout  << "---------------" << endl);
 
@@ -3934,7 +3934,7 @@ int main(int argc, char* argv[])
     memInfo.update();
     ss << "*** Memory Info: RSS: " << memInfo.rss()/1024 << "Mb - Peak: " << memInfo.peakRss()/1024 << "Mb" << endl;
 
-    mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
+    mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new GenericConsoleStringOutputMessage(ss.str())));
     guiSendCapture(false);
 #endif
 
diff --git a/simulator/outputqueuemanager.cpp b/simulator/outputqueuemanager.cpp
index ebc2ee5..3cf340d 100644
--- a/simulator/outputqueuemanager.cpp
+++ b/simulator/outputqueuemanager.cpp
@@ -66,13 +66,13 @@ void OutputQueueManager::start()
 
 void OutputQueueManager::finish()
 {
-    enqueue(std::shared_ptr<OutputMessage>(new QuitMessage));
+    enqueue(boost::shared_ptr<OutputMessage>(new QuitMessage));
 
     void *out;
     pthread_join(mThread, &out);
 }
 
-void OutputQueueManager::enqueue(std::shared_ptr<OutputMessage> msg)
+void OutputQueueManager::enqueue(boost::shared_ptr<OutputMessage> msg)
 {
     MutexLocker locker(&mMutex);
 
@@ -105,7 +105,7 @@ void *OutputQueueManager::thread(OutputQueueManager::ThreadArgs *args)
             unlock();
             continue;
         }
-        std::shared_ptr<OutputMessage> msg = mQueue.front();
+        boost::shared_ptr<OutputMessage> msg = mQueue.front();
         mQueue.pop();
         unlock();
 
diff --git a/simulator/outputqueuemanager.h b/simulator/outputqueuemanager.h
index 7dde627..c983669 100644
--- a/simulator/outputqueuemanager.h
+++ b/simulator/outputqueuemanager.h
@@ -31,6 +31,8 @@
 #include <memory>
 #include <ostream>
 
+#include <boost/shared_ptr.hpp>
+
 class OutputMessage;
 
 /** @brief A manager for the outputs from all the other simulator threads. */
@@ -51,7 +53,7 @@ public:
         pthread_mutex_unlock(&mMutex);
     }
 
-    void enqueue(std::shared_ptr<OutputMessage> msg);
+    void enqueue(boost::shared_ptr<OutputMessage> msg);
 private:
     /** @brief The pthread-style entry point to the thread. */
     static void *thread_trampoline(void *);
@@ -70,7 +72,7 @@ private:
     pthread_mutex_t mMutex;
     sem_t mSemaphore;
 
-    std::queue<std::shared_ptr<OutputMessage> > mQueue;
+    std::queue<boost::shared_ptr<OutputMessage> > mQueue;
 
     IpcQueue ipcQueue;
     enum ProtocolType { TextWithStdOut, Binary } mType;
diff --git a/simulator/simulator.pro b/simulator/simulator.pro
index 65d2b31..4b123ca 100644
--- a/simulator/simulator.pro
+++ b/simulator/simulator.pro
@@ -1,5 +1,5 @@
 CONFIG -= qt
-CONFIG += c++11
+CONFIG +=
 
 TARGET=displace
 TEMPLATE=app
diff --git a/simulator/thread_vessels.cpp b/simulator/thread_vessels.cpp
index 4ef3d0b..80a69d7 100644
--- a/simulator/thread_vessels.cpp
+++ b/simulator/thread_vessels.cpp
@@ -132,7 +132,7 @@ static void manage_vessel(thread_data_t *dt, int idx_v)
                 // i.e. just arrived!
                 if(!inactive)
                 {
-                    mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new VesselLogbookOutputMessage(loglike, tstep, vessels[index_v], populations)));
+                    mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new VesselLogbookOutputMessage(loglike, tstep, vessels[index_v], populations)));
 #if 0
                     std::ostringstream ss;
                     vessels[ index_v ]->export_loglike (ss, populations, tstep, nbpops);
@@ -359,12 +359,12 @@ static void manage_vessel(thread_data_t *dt, int idx_v)
 
     if(export_vmslike /*&& tstep<8641*/) {
         if( vessels[ index_v ]->get_state()!=3) {
-            mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new ExportVmslikeOutputMessage(vmslike, tstep, vessels[index_v])));
+            mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new ExportVmslikeOutputMessage(vmslike, tstep, vessels[index_v])));
         }
     }
 
     if (use_gui && gui_move_vessels) {
-        mOutQueue.enqueue(std::shared_ptr<OutputMessage>(new MoveVesselOutputMessage(tstep, vessels[index_v])));
+        mOutQueue.enqueue(boost::shared_ptr<OutputMessage>(new MoveVesselOutputMessage(tstep, vessels[index_v])));
     }
 
     // realtime gnuplot
